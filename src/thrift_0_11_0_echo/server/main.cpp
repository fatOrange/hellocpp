// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TBufferTransports.h>
#include <thrift/transport/TServerSocket.h>
#include "Service.h"

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using namespace ::addservice;

class ServiceHandler : virtual public ServiceIf {
   public:
    ServiceHandler() {
    }

    void add(Response& response, const Request& request) {
        usleep(30);
        response.v = request.a + request.b;
    }
};

int main(int argc, char** argv) {
    int port = 9090;
    ::apache::thrift::stdcxx::shared_ptr<ServiceHandler> handler(new ServiceHandler());
    ::apache::thrift::stdcxx::shared_ptr<TProcessor> processor(new ServiceProcessor(handler));
    ::apache::thrift::stdcxx::shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
    ::apache::thrift::stdcxx::shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
    ::apache::thrift::stdcxx::shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

    TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
    server.serve();
    return 0;
}
